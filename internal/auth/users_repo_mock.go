// Code generated by MockGen. DO NOT EDIT.
// Source: internal/auth/users_repo.go

// Package auth is a generated GoMock package.
package auth

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockUsersRepo is a mock of UsersRepo interface
type MockUsersRepo struct {
	ctrl     *gomock.Controller
	recorder *MockUsersRepoMockRecorder
}

// MockUsersRepoMockRecorder is the mock recorder for MockUsersRepo
type MockUsersRepoMockRecorder struct {
	mock *MockUsersRepo
}

// NewMockUsersRepo creates a new mock instance
func NewMockUsersRepo(ctrl *gomock.Controller) *MockUsersRepo {
	mock := &MockUsersRepo{ctrl: ctrl}
	mock.recorder = &MockUsersRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUsersRepo) EXPECT() *MockUsersRepoMockRecorder {
	return m.recorder
}

// GetByEmailAndPassword mocks base method
func (m *MockUsersRepo) GetByEmailAndPassword(email, password string) (User, error) {
	ret := m.ctrl.Call(m, "GetByEmailAndPassword", email, password)
	ret0, _ := ret[0].(User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByEmailAndPassword indicates an expected call of GetByEmailAndPassword
func (mr *MockUsersRepoMockRecorder) GetByEmailAndPassword(email, password interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByEmailAndPassword", reflect.TypeOf((*MockUsersRepo)(nil).GetByEmailAndPassword), email, password)
}

// GetByToken mocks base method
func (m *MockUsersRepo) GetByToken(token string) (User, error) {
	ret := m.ctrl.Call(m, "GetByToken", token)
	ret0, _ := ret[0].(User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByToken indicates an expected call of GetByToken
func (mr *MockUsersRepoMockRecorder) GetByToken(token interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByToken", reflect.TypeOf((*MockUsersRepo)(nil).GetByToken), token)
}

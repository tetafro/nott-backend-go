// Code generated by MockGen. DO NOT EDIT.
// Source: internal/auth/tokens.go

// Package auth is a generated GoMock package.
package auth

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockTokener is a mock of Tokener interface
type MockTokener struct {
	ctrl     *gomock.Controller
	recorder *MockTokenerMockRecorder
}

// MockTokenerMockRecorder is the mock recorder for MockTokener
type MockTokenerMockRecorder struct {
	mock *MockTokener
}

// NewMockTokener creates a new mock instance
func NewMockTokener(ctrl *gomock.Controller) *MockTokener {
	mock := &MockTokener{ctrl: ctrl}
	mock.recorder = &MockTokenerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTokener) EXPECT() *MockTokenerMockRecorder {
	return m.recorder
}

// Issue mocks base method
func (m *MockTokener) Issue(arg0 User) (Token, error) {
	ret := m.ctrl.Call(m, "Issue", arg0)
	ret0, _ := ret[0].(Token)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Issue indicates an expected call of Issue
func (mr *MockTokenerMockRecorder) Issue(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Issue", reflect.TypeOf((*MockTokener)(nil).Issue), arg0)
}

// Parse mocks base method
func (m *MockTokener) Parse(token string) (int, error) {
	ret := m.ctrl.Call(m, "Parse", token)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Parse indicates an expected call of Parse
func (mr *MockTokenerMockRecorder) Parse(token interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Parse", reflect.TypeOf((*MockTokener)(nil).Parse), token)
}

// Code generated by MockGen. DO NOT EDIT.
// Source: internal/storage/repositories.go

// Package storage is a generated GoMock package.
package storage

import (
	gomock "github.com/golang/mock/gomock"
	auth "github.com/tetafro/nott-backend-go/internal/auth"
	domain "github.com/tetafro/nott-backend-go/internal/domain"
	reflect "reflect"
)

// MockUsersRepo is a mock of UsersRepo interface
type MockUsersRepo struct {
	ctrl     *gomock.Controller
	recorder *MockUsersRepoMockRecorder
}

// MockUsersRepoMockRecorder is the mock recorder for MockUsersRepo
type MockUsersRepoMockRecorder struct {
	mock *MockUsersRepo
}

// NewMockUsersRepo creates a new mock instance
func NewMockUsersRepo(ctrl *gomock.Controller) *MockUsersRepo {
	mock := &MockUsersRepo{ctrl: ctrl}
	mock.recorder = &MockUsersRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUsersRepo) EXPECT() *MockUsersRepoMockRecorder {
	return m.recorder
}

// GetByID mocks base method
func (m *MockUsersRepo) GetByID(id int) (auth.User, error) {
	ret := m.ctrl.Call(m, "GetByID", id)
	ret0, _ := ret[0].(auth.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID
func (mr *MockUsersRepoMockRecorder) GetByID(id interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockUsersRepo)(nil).GetByID), id)
}

// GetByEmail mocks base method
func (m *MockUsersRepo) GetByEmail(email string) (auth.User, error) {
	ret := m.ctrl.Call(m, "GetByEmail", email)
	ret0, _ := ret[0].(auth.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByEmail indicates an expected call of GetByEmail
func (mr *MockUsersRepoMockRecorder) GetByEmail(email interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByEmail", reflect.TypeOf((*MockUsersRepo)(nil).GetByEmail), email)
}

// Create mocks base method
func (m *MockUsersRepo) Create(arg0 auth.User) (auth.User, error) {
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(auth.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockUsersRepoMockRecorder) Create(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUsersRepo)(nil).Create), arg0)
}

// Update mocks base method
func (m *MockUsersRepo) Update(arg0 auth.User) (auth.User, error) {
	ret := m.ctrl.Call(m, "Update", arg0)
	ret0, _ := ret[0].(auth.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update
func (mr *MockUsersRepoMockRecorder) Update(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockUsersRepo)(nil).Update), arg0)
}

// MockFoldersRepo is a mock of FoldersRepo interface
type MockFoldersRepo struct {
	ctrl     *gomock.Controller
	recorder *MockFoldersRepoMockRecorder
}

// MockFoldersRepoMockRecorder is the mock recorder for MockFoldersRepo
type MockFoldersRepoMockRecorder struct {
	mock *MockFoldersRepo
}

// NewMockFoldersRepo creates a new mock instance
func NewMockFoldersRepo(ctrl *gomock.Controller) *MockFoldersRepo {
	mock := &MockFoldersRepo{ctrl: ctrl}
	mock.recorder = &MockFoldersRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockFoldersRepo) EXPECT() *MockFoldersRepoMockRecorder {
	return m.recorder
}

// Get mocks base method
func (m *MockFoldersRepo) Get(arg0 FoldersFilter) ([]domain.Folder, error) {
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].([]domain.Folder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockFoldersRepoMockRecorder) Get(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockFoldersRepo)(nil).Get), arg0)
}

// Create mocks base method
func (m *MockFoldersRepo) Create(arg0 domain.Folder) (domain.Folder, error) {
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(domain.Folder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockFoldersRepoMockRecorder) Create(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockFoldersRepo)(nil).Create), arg0)
}

// Update mocks base method
func (m *MockFoldersRepo) Update(arg0 domain.Folder) (domain.Folder, error) {
	ret := m.ctrl.Call(m, "Update", arg0)
	ret0, _ := ret[0].(domain.Folder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update
func (mr *MockFoldersRepoMockRecorder) Update(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockFoldersRepo)(nil).Update), arg0)
}

// Delete mocks base method
func (m *MockFoldersRepo) Delete(arg0 domain.Folder) error {
	ret := m.ctrl.Call(m, "Delete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockFoldersRepoMockRecorder) Delete(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockFoldersRepo)(nil).Delete), arg0)
}

// MockNotepadsRepo is a mock of NotepadsRepo interface
type MockNotepadsRepo struct {
	ctrl     *gomock.Controller
	recorder *MockNotepadsRepoMockRecorder
}

// MockNotepadsRepoMockRecorder is the mock recorder for MockNotepadsRepo
type MockNotepadsRepoMockRecorder struct {
	mock *MockNotepadsRepo
}

// NewMockNotepadsRepo creates a new mock instance
func NewMockNotepadsRepo(ctrl *gomock.Controller) *MockNotepadsRepo {
	mock := &MockNotepadsRepo{ctrl: ctrl}
	mock.recorder = &MockNotepadsRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockNotepadsRepo) EXPECT() *MockNotepadsRepoMockRecorder {
	return m.recorder
}

// Get mocks base method
func (m *MockNotepadsRepo) Get(arg0 NotepadsFilter) ([]domain.Notepad, error) {
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].([]domain.Notepad)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockNotepadsRepoMockRecorder) Get(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockNotepadsRepo)(nil).Get), arg0)
}

// Create mocks base method
func (m *MockNotepadsRepo) Create(arg0 domain.Notepad) (domain.Notepad, error) {
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(domain.Notepad)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockNotepadsRepoMockRecorder) Create(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockNotepadsRepo)(nil).Create), arg0)
}

// Update mocks base method
func (m *MockNotepadsRepo) Update(arg0 domain.Notepad) (domain.Notepad, error) {
	ret := m.ctrl.Call(m, "Update", arg0)
	ret0, _ := ret[0].(domain.Notepad)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update
func (mr *MockNotepadsRepoMockRecorder) Update(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockNotepadsRepo)(nil).Update), arg0)
}

// Delete mocks base method
func (m *MockNotepadsRepo) Delete(arg0 domain.Notepad) error {
	ret := m.ctrl.Call(m, "Delete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockNotepadsRepoMockRecorder) Delete(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockNotepadsRepo)(nil).Delete), arg0)
}

// MockNotesRepo is a mock of NotesRepo interface
type MockNotesRepo struct {
	ctrl     *gomock.Controller
	recorder *MockNotesRepoMockRecorder
}

// MockNotesRepoMockRecorder is the mock recorder for MockNotesRepo
type MockNotesRepoMockRecorder struct {
	mock *MockNotesRepo
}

// NewMockNotesRepo creates a new mock instance
func NewMockNotesRepo(ctrl *gomock.Controller) *MockNotesRepo {
	mock := &MockNotesRepo{ctrl: ctrl}
	mock.recorder = &MockNotesRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockNotesRepo) EXPECT() *MockNotesRepoMockRecorder {
	return m.recorder
}

// Get mocks base method
func (m *MockNotesRepo) Get(arg0 NotesFilter) ([]domain.Note, error) {
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].([]domain.Note)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockNotesRepoMockRecorder) Get(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockNotesRepo)(nil).Get), arg0)
}

// Create mocks base method
func (m *MockNotesRepo) Create(arg0 domain.Note) (domain.Note, error) {
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(domain.Note)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockNotesRepoMockRecorder) Create(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockNotesRepo)(nil).Create), arg0)
}

// Update mocks base method
func (m *MockNotesRepo) Update(arg0 domain.Note) (domain.Note, error) {
	ret := m.ctrl.Call(m, "Update", arg0)
	ret0, _ := ret[0].(domain.Note)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update
func (mr *MockNotesRepoMockRecorder) Update(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockNotesRepo)(nil).Update), arg0)
}

// Delete mocks base method
func (m *MockNotesRepo) Delete(arg0 domain.Note) error {
	ret := m.ctrl.Call(m, "Delete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockNotesRepoMockRecorder) Delete(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockNotesRepo)(nil).Delete), arg0)
}
